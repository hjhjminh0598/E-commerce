# eureka-server.yaml

apiVersion: apps/v1
kind: Deployment
metadata:
  name: eureka-server
  labels:
    app: eureka-server
spec:
  replicas: 1 # Single instance for learning/testing
  selector:
    matchLabels:
      app: eureka-server
  template:
    metadata:
      labels:
        app: eureka-server
    spec:
      containers:
        - name: eureka-server
          image: us-docker.pkg.dev/fresh-replica-458307-s5/gcr.io/eureka-server:v1.0.1-amd64 # Your amd64 Eureka Server image
          ports:
            - containerPort: 8761 # Default Eureka port
          env:
            - name: SERVER_PORT
              value: "8761"
            # Configuration for a single Eureka Server node
            - name: EUREKA_CLIENT_REGISTERWITHEUREKA
              value: "false"
            - name: EUREKA_CLIENT_FETCHREGISTRY
              value: "false"
            - name: EUREKA_INSTANCE_HOSTNAME # Clients can use the service name 'eureka-server'
              value: "eureka-server"
            - name: EUREKA_CLIENT_SERVICEURL_DEFAULTZONE # Points to itself via the internal service name
              value: "http://eureka-server:8761/eureka/"
            # Expose health and info actuators for probes
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "health,info,prometheus" # Added prometheus for potential future monitoring
          resources:
            requests:
              memory: "512Mi" # Eureka can be a bit memory hungry
              cpu: "100m"     # 0.1 CPU core
            limits:
              memory: "1Gi"
              cpu: "500m"     # 0.5 CPU core
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8761
            initialDelaySeconds: 45 # Eureka can take a bit longer to start
            periodSeconds: 15
            failureThreshold: 3
            timeoutSeconds: 5
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8761
            initialDelaySeconds: 90 # Longer delay for liveness
            periodSeconds: 20
            failureThreshold: 3
            timeoutSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: eureka-server # Internal DNS name for other services
  labels:
    app: eureka-server
spec:
  selector:
    app: eureka-server
  ports:
    - protocol: TCP
      port: 8761       # Port the service listens on
      targetPort: 8761 # Port on the pods
  type: ClusterIP    # Only accessible from within the cluster
---
apiVersion: v1
kind: Service
metadata:
  name: eureka-server-external # For accessing the Eureka dashboard externally
  labels:
    app: eureka-server
spec:
  type: NodePort
  selector:
    app: eureka-server
  ports:
    - protocol: TCP
      port: 8761       # Service port (less relevant for NodePort URL)
      targetPort: 8761 # Pod port
      name: http
      # nodePort: 30761 # Optional: specify a NodePort, or let K8s assign one