// Jenkinsfile - Phase 3: Docker Build and Push

pipeline {
    agent any // Runs on the Jenkins master (which now has Docker access via socket)

    tools {
        maven 'MAVEN_HOME' // Ensure this is configured in Jenkins Global Tool Configuration
        jdk 'JDK_17'       // Ensure this is configured in Jenkins Global Tool Configuration
    }

    environment {
        SERVICE_DIR                 = 'user-service' // Change for other services
        GCP_PROJECT_ID              = 'fresh-replica-458307-s5' // Your GCP Project ID
        GAR_LOCATION                = 'us' // Your Artifact Registry location
        GAR_REPOSITORY              = 'gcr.io' // Your Artifact Registry repository name
        IMAGE_NAME                  = 'user-service' // Change for other services
        IMAGE_TAG                   = "build-${env.BUILD_NUMBER}-amd64" // Unique tag using Jenkins build number
        GCP_SA_CREDENTIAL_ID        = 'gcp-sa-artifact-registry' // The ID you gave the credential in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checking out code for ${env.SERVICE_DIR}..."
                checkout scm
            }
        }

        stage('Build & Test Application') {
            steps {
                dir(env.SERVICE_DIR) {
                    echo "Building ${env.SERVICE_DIR}..."
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build and Push Docker Image') {
                    steps {
                        dir(env.SERVICE_DIR) { // Ensure your Dockerfile is in this directory
                            script {
                                def fullImageName = "${env.GAR_LOCATION}-docker.pkg.dev/${env.GCP_PROJECT_ID}/${env.GAR_REPOSITORY}/${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                                echo "Building and pushing Docker image: ${fullImageName}"

                                withCredentials([file(credentialsId: env.GCP_SA_CREDENTIAL_ID, variable: 'GCP_KEY_FILE_PATH')]) {
                                    sh """
                                        # Check if Docker CLI is installed, if not, try to install it
                                        # This assumes a Debian/Ubuntu-based Jenkins image like jenkins/jenkins:lts-jdk17
                                        if ! command -v docker &> /dev/null
                                        then
                                            echo "Docker CLI not found, attempting to install..."
                                            apt-get update -y && apt-get install -y docker.io --no-install-recommends
                                            if ! command -v docker &> /dev/null
                                            then
                                                echo "Failed to install Docker CLI using 'docker.io'. Trying with Docker's official script..."
                                                # Fallback if docker.io isn't suitable or available via that name
                                                curl -fsSL https://get.docker.com -o get-docker.sh
                                                sh get-docker.sh
                                                rm get-docker.sh
                                                if ! command -v docker &> /dev/null
                                                then
                                                    echo "FATAL: Docker CLI still not found after multiple attempts. Please check Jenkins agent configuration."
                                                    exit 1
                                                fi
                                            fi
                                            echo "Docker CLI installed."
                                        else
                                            echo "Docker CLI found."
                                        fi

                                        echo "Attempting Docker login to https://${env.GAR_LOCATION}-docker.pkg.dev"
                                        # Use cat to pipe the JSON key to docker login's --password-stdin
                                        cat "${GCP_KEY_FILE_PATH}" | docker login -u _json_key --password-stdin https://${env.GAR_LOCATION}-docker.pkg.dev

                                        echo "Attempting Docker buildx build and push for ${fullImageName}"
                                        # Your Mac's Docker Desktop (with buildx) will execute this via the mounted socket
                                        docker buildx build --platform linux/amd64 -t "${fullImageName}" --push .
                                    """
                                }
                                echo "Successfully pushed (or attempted to push) ${fullImageName}"
                            }
                        }
                    }
                }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo "Pipeline Succeeded: ${env.IMAGE_NAME}:${env.IMAGE_TAG} pushed."
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
