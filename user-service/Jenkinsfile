// Jenkinsfile for E-commerce Monorepo - User Service CI

pipeline {
    agent any // Runs on the Jenkins master VM (which has Docker, gcloud, Java, Maven)

    tools {
        // Ensure these tool names match what you configured in Jenkins Global Tool Configuration
        maven 'MAVEN_HOME' // e.g., MAVEN_HOME, or your chosen name
        jdk 'JDK_17'       // e.g., JDK_17, or your chosen name
    }

    environment {
        // Variables specific to this service's pipeline
        SERVICE_DIR                 = 'user-service'
        IMAGE_NAME                  = 'user-service'
        GCP_PROJECT_ID              = 'fresh-replica-458307-s5'
        GAR_LOCATION                = 'us'
        GAR_REPOSITORY              = 'gcr.io'
        IMAGE_TAG                   = "build-${env.BUILD_NUMBER}-amd64"
        GCP_SA_CREDENTIAL_ID        = 'gcp-sa-artifact-registry'
        GKE_CLUSTER_NAME            = 'kafka-cluster'
        GKE_CLUSTER_ZONE            = 'us-central1-c'
    }

    stages {

        stage('Checkout Code') {
            steps {
                echo "Checking out code for ${env.SERVICE_NAME}..." // Using SERVICE_NAME from top-level env
                checkout scm
            }
        }

        stage('Build Application') { // Renamed for clarity
            steps {
                dir(env.SERVICE_DIR) {
                    echo "Building ${env.IMAGE_NAME} with Maven..." // Using IMAGE_NAME from top-level env
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir(env.SERVICE_DIR) { // Ensure your Dockerfile is in this directory
                    script {
                        def fullImageName = "${env.GAR_LOCATION}-docker.pkg.dev/${env.GCP_PROJECT_ID}/${env.GAR_REPOSITORY}/${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                        echo "Building and pushing Docker image: ${fullImageName}"

                        withCredentials([file(credentialsId: env.GCP_SA_CREDENTIAL_ID, variable: 'GCP_KEY_FILE_PATH')]) {
                            sh """
                                echo "Activating GCP Service Account..."
                                gcloud auth activate-service-account --key-file=${GCP_KEY_FILE_PATH} --project=${env.GCP_PROJECT_ID}

                                echo "Configuring Docker to use gcloud credential helper for https://${env.GAR_LOCATION}-docker.pkg.dev..."
                                gcloud auth configure-docker ${env.GAR_LOCATION}-docker.pkg.dev --quiet

                                echo "Login via gcloud configure-docker completed. Proceeding with Docker build and push for ${fullImageName}"
                                # The Docker daemon on your GCE VM (which is amd64) will perform the build.
                                # --platform linux/amd64 is explicit and good practice.
                                docker buildx build --platform linux/amd64 -t "${fullImageName}" --push .
                            """
                        }
                        echo "Push process for ${fullImageName} completed."
                    }
                }
            }
        }

        stage('Deploy to GKE') {
                    steps {
                        script {
                            def fullImageName = "${env.GAR_LOCATION}-docker.pkg.dev/${env.GCP_PROJECT_ID}/${env.GAR_REPOSITORY}/${env.IMAGE_NAME}:${env.IMAGE_TAG}"

                            echo "Deploying ${fullImageName} to GKE cluster ${env.GKE_CLUSTER_NAME} in zone ${env.GKE_CLUSTER_ZONE}..."
                            withCredentials([file(credentialsId: env.GCP_SA_CREDENTIAL_ID, variable: 'GCP_KEY_FILE_PATH')]) {
                                sh """
                                    echo "Activating GCP Service Account for GKE deployment..."
                                    gcloud auth activate-service-account --key-file=${GCP_KEY_FILE_PATH} --project=${env.GCP_PROJECT_ID}

                                    echo "Getting GKE cluster credentials..."
                                    gcloud container clusters get-credentials ${env.GKE_CLUSTER_NAME} --zone ${env.GKE_CLUSTER_ZONE} --project ${env.GCP_PROJECT_ID}

                                    echo "Updating deployment ${env.IMAGE_NAME} with image ${fullImageName}..."
                                    # Using kubectl set image for simplicity.
                                    # Assumes your K8s deployment name matches your IMAGE_NAME (e.g., 'user-service')
                                    # and the container within the deployment also matches IMAGE_NAME.
                                    kubectl set image deployment/${env.IMAGE_NAME} ${env.IMAGE_NAME}=${fullImageName}

                                    echo "Checking rollout status for deployment ${env.IMAGE_NAME}..."
                                    kubectl rollout status deployment/${env.IMAGE_NAME} --timeout=10m
                                """
                            }
                            echo "Deployment of ${env.IMAGE_NAME} to GKE completed."
                        }
                    }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo "Pipeline Succeeded: ${env.IMAGE_NAME}:${env.IMAGE_TAG} pushed to GAR."
        }
        failure {
            echo 'Pipeline failed. Check console output for details.'
        }
    }
}