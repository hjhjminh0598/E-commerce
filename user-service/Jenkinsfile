// Jenkinsfile - Phase 3: Docker Build and Push

pipeline {
    agent any // Runs on the Jenkins master (which now has Docker access via socket)

    tools {
        maven 'MAVEN_HOME' // Ensure this is configured in Jenkins Global Tool Configuration
        jdk 'JDK_17'       // Ensure this is configured in Jenkins Global Tool Configuration
    }

    environment {
        SERVICE_DIR                 = 'user-service' // Change for other services
        GCP_PROJECT_ID              = 'fresh-replica-458307-s5' // Your GCP Project ID
        GAR_LOCATION                = 'us' // Your Artifact Registry location
        GAR_REPOSITORY              = 'gcr.io' // Your Artifact Registry repository name
        IMAGE_NAME                  = 'user-service' // Change for other services
        IMAGE_TAG                   = "build-${env.BUILD_NUMBER}-amd64" // Unique tag using Jenkins build number
        GCP_SA_CREDENTIAL_ID        = 'gcp-sa-artifact-registry' // The ID you gave the credential in Jenkins
    }

    stages {
        stage('Checkout') {
            steps {
                echo "Checking out code for ${env.SERVICE_DIR}..."
                checkout scm
            }
        }

        stage('Build & Test Application') {
            steps {
                dir(env.SERVICE_DIR) {
                    echo "Building ${env.SERVICE_DIR}..."
                    sh 'mvn clean package -DskipTests'
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                dir(env.SERVICE_DIR) { // Ensure your Dockerfile is in this directory
                    script {
                        def fullImageName = "${env.GAR_LOCATION}-docker.pkg.dev/${env.GCP_PROJECT_ID}/${env.GAR_REPOSITORY}/${env.IMAGE_NAME}:${env.IMAGE_TAG}"
                        echo "Building and pushing Docker image: ${fullImageName}"

                        // Use the Jenkins credential
                        withCredentials([file(credentialsId: env.GCP_SA_CREDENTIAL_ID, variable: 'GCP_KEY_FILE_PATH')]) {
                            // Authenticate Docker to Google Artifact Registry using the SA key
                            // This method uses docker login with the JSON key, avoiding full gcloud SDK dependency for this step if not present
                            sh "docker login -u _json_key --password-stdin https://${env.GAR_LOCATION}-docker.pkg.dev < ${GCP_KEY_FILE_PATH}"

                            // Build and push using Docker CLI (buildx assumed to be usable by host Docker)
                            // Your Mac's Docker Desktop (with buildx) will execute this
                            sh "docker buildx build --platform linux/amd64 -t ${fullImageName} --push ."
                        }
                        echo "Successfully pushed ${fullImageName}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline finished.'
        }
        success {
            echo "Pipeline Succeeded: ${env.IMAGE_NAME}:${env.IMAGE_TAG} pushed."
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}
